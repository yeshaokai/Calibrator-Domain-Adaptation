import numpy as np
import torch
import torch.nn as nn
from torch.nn import init
from .util import init_weights
from .models import register_model, get_model
from .backbones import PixelDiscriminator
from .backbones import  FeatureDiscriminator as Cls_FeatureDiscriminator
from .backbones import init_net
from .fcn8s import  Discriminator as Seg_FeatureDiscriminator

@register_model('CalibratorNet')
class CalibratorNet(nn.Module):
    "Defines and Calibrator Network."

    def __init__(self, cfg, weights_init=None,src_weights_init=None):
        super(CalibratorNet, self).__init__()
        self.name = 'CalibratorNet'
                
        self.src_model_name = cfg['SRC_NET']['ARCH']
        self.num_cls = cfg['SRC_NET']['NUM_CLS']
        self.cls_criterion = nn.CrossEntropyLoss()
        self.gan_criterion = nn.CrossEntropyLoss()

        self.patch_size = cfg['CALIBRATOR']['PATCH_SIZE']
        self.resolution = cfg['CALIBRATOR']['RESOLUTION']
        self.task = cfg['TRAIN']['TASK']
        self.cfg = cfg
        
        self.setup_net()

        
        if weights_init is not None:
            self.src_net = get_model(self.src_model_name, cfg)

            '''
            self.src_net = torch.nn.DataParallel(self.src_net)
            self.pixel_discriminator = torch.nn.DataParallel(self.pixel_discriminator)
            self.discriminator = torch.nn.DataParallel(self.discriminator)
            self.calibrator_T = torch.nn.DataParallel(self.calibrator_T)          x                         
            '''

            self.load(weights_init)
        elif src_weights_init is not None:

            self.load_src_net(src_weights_init)
            '''
            self.src_net = torch.nn.DataParallel(self.src_net)
            self.pixel_discriminator = torch.nn.DataParallel(self.pixel_discriminator)
            self.discriminator = torch.nn.DataParallel(self.discriminator)
            self.calibrator_T = torch.nn.DataParallel(self.calibrator_T)                                                           
            '''
        else:
            raise Exception('AddaNet must be initialized with weights.')
        if hasattr(self.src_net,'num_channels'):
            self.num_channels = self.src_net.num_channels
        if hasattr(self.src_net,'image_size'):
            self.image_size = self.src_net.image_size
    def forward(self, x_s, x_t):
        """Pass source and target images through their
        respective networks."""

        score_s, x_s = self.src_net(x_s, with_ft=True)
        calibratrion = self.calibrator_net(x_t, with_ft=False)

        # return score_s, score_t, d_s, d_t
        return score_s, calibration

    def setup_net(self):
        """Setup source, target and discriminator networks."""        
        
        self.calibrator_T = get_model('Calibrator', self.cfg)

        self.pixel_discriminator =  PixelDiscriminator(patch_size=self.patch_size,resolution = self.resolution)
        init_net(self.pixel_discriminator)                        
        
        if self.task == 'classification':

            self.discriminator = Cls_FeatureDiscriminator(cfg)
            
        elif self.task == 'segmentation':
            
            idim = 19              
            odim = 4            
            #patch_size = 64
            #resolution = 768
            
            self.discriminator = Seg_FeatureDiscriminator(input_dim=idim,output_dim=odim)

        self.discriminator


    def load(self, init_path):        
        # load whole calibrator_net for evaluating
        
        net_init_dict = torch.load(init_path)
                
        self.load_state_dict(net_init_dict)


    def load_src_net(self, init_path):
        # load source net only 
        
        self.src_net = get_model(self.src_model_name, self.cfg, weights_init = init_path, pretrained=True) 
        self.src_net.load_state_dict(torch.load(init_path))

    def save(self, out_path):
        torch.save(self.state_dict(), out_path)



